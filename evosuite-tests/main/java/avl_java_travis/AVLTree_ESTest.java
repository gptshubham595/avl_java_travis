/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 18 15:21:27 GMT 2022
 */

package main.java.avl_java_travis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import main.java.avl_java_travis.AVLTree;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AVLTree_ESTest extends AVLTree_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(2649);
      aVLTree0.delete((-535));
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      aVLTree0.delete((-3073));
      aVLTree0.insert((-3073));
      aVLTree0.height();
      AVLTree.Node aVLTree_Node1 = aVLTree_Node0.left;
      aVLTree_Node0.left = aVLTree_Node1;
      aVLTree0.insert(20);
      aVLTree_Node0.left = aVLTree_Node1;
      int int0 = (-158);
      aVLTree_Node0.height = (-3073);
      aVLTree0.insert((-158));
      // Undeclared exception!
      try { 
        aVLTree0.insert(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.avl_java_travis.AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(2649);
      aVLTree0.delete((-535));
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      aVLTree0.delete((-3038));
      aVLTree0.insert((-3038));
      aVLTree0.height();
      AVLTree.Node aVLTree_Node1 = aVLTree_Node0.left;
      aVLTree_Node0.left = aVLTree_Node1;
      aVLTree0.insert(26);
      aVLTree_Node0.left = aVLTree_Node1;
      aVLTree_Node0.left.left = aVLTree_Node0.left;
      aVLTree_Node0.height = (-3038);
      aVLTree0.insert((-158));
      aVLTree0.insert(1);
      aVLTree0.height();
      aVLTree0.getBalance(aVLTree_Node0);
      aVLTree0.height();
      // Undeclared exception!
      aVLTree0.find((-158));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(0);
      aVLTree0.delete(0);
      aVLTree0.delete((-1014));
      aVLTree0.insert(0);
      aVLTree0.delete(1);
      aVLTree0.find((-1));
      aVLTree0.delete((-372));
      aVLTree0.delete((-1289));
      aVLTree0.insert((-468));
      aVLTree0.insert(979);
      aVLTree0.insert(1509);
      aVLTree0.insert(999);
      aVLTree0.delete(0);
      aVLTree0.getRoot();
      aVLTree0.find((-1493));
      aVLTree0.insert(0);
      // Undeclared exception!
      try { 
        aVLTree0.insert(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("main.java.avl_java_travis.AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete((-2299));
      aVLTree0.insert((-2299));
      aVLTree0.getRoot();
      aVLTree0.delete((-2299));
      aVLTree0.find((-2299));
      aVLTree0.insert((-2299));
      aVLTree0.find((-2299));
      aVLTree0.height();
      aVLTree0.delete((-1));
      aVLTree0.height();
      AVLTree.Node aVLTree_Node0 = aVLTree0.find((-2299));
      aVLTree0.find((-2299));
      aVLTree0.insert((-1));
      aVLTree_Node0.key = 0;
      aVLTree_Node0.left = null;
      aVLTree_Node0.height = (-2299);
      aVLTree0.getRoot();
      aVLTree0.getBalance(aVLTree_Node0);
      aVLTree0.delete((-5749));
      assertEquals(1, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete(2931);
      aVLTree0.delete(1);
      aVLTree0.insert(1835);
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      AVLTree aVLTree1 = new AVLTree();
      AVLTree.Node aVLTree_Node1 = aVLTree1.new Node(1);
      aVLTree_Node0.left = aVLTree_Node1;
      aVLTree_Node0.key = 1835;
      aVLTree0.getBalance(aVLTree_Node0);
      aVLTree0.find(0);
      aVLTree0.height();
      aVLTree0.insert((-789));
      aVLTree0.delete(0);
      aVLTree0.insert((-630));
      assertEquals(2, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.find(0);
      aVLTree0.insert((-2139));
      aVLTree0.insert(0);
      aVLTree0.delete(1128);
      aVLTree0.insert(1117);
      aVLTree0.getRoot();
      assertEquals(1, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(0);
      aVLTree0.delete((-1));
      aVLTree0.delete(0);
      aVLTree0.insert(0);
      aVLTree0.delete(1);
      aVLTree0.delete(2180);
      aVLTree0.delete((-2442));
      aVLTree0.getRoot();
      aVLTree0.height();
      aVLTree0.delete(1476);
      aVLTree0.getRoot();
      int int0 = aVLTree0.height();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(2649);
      aVLTree0.delete((-535));
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      aVLTree0.delete((-3073));
      aVLTree0.insert((-3073));
      aVLTree0.height();
      AVLTree.Node aVLTree_Node1 = aVLTree_Node0.left;
      aVLTree_Node0.left = aVLTree_Node1;
      aVLTree0.insert(0);
      aVLTree_Node0.left = aVLTree_Node1;
      aVLTree_Node0.height = (-3073);
      aVLTree0.insert((-158));
      aVLTree0.insert(1);
      aVLTree0.height();
      aVLTree0.getBalance(aVLTree_Node0);
      aVLTree0.height();
      aVLTree0.find((-158));
      assertEquals(3, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      assertNull(aVLTree_Node0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete(0);
      aVLTree0.delete(0);
      int int0 = 1075;
      aVLTree0.insert(1075);
      aVLTree0.insert(0);
      int int1 = 528;
      aVLTree0.delete((-722));
      // Undeclared exception!
      try { 
        aVLTree0.delete(1075);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.avl_java_travis.AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(0);
      aVLTree0.delete((-2361));
      aVLTree0.insert((-2361));
      aVLTree0.delete((-2361));
      aVLTree0.height();
      aVLTree0.insert((-2361));
      aVLTree0.height();
      aVLTree0.delete((-2560));
      aVLTree0.find(1);
      aVLTree0.insert((-372));
      int int0 = aVLTree0.getBalance((AVLTree.Node) null);
      assertEquals(1, aVLTree0.height());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      AVLTree.Node aVLTree_Node0 = aVLTree0.new Node((-384));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert((-2091));
      aVLTree0.find((-68));
      aVLTree0.insert((-1));
      aVLTree0.delete(0);
      aVLTree0.getRoot();
      aVLTree0.height();
      int int0 = aVLTree0.height();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(271);
      aVLTree0.find(3670);
      aVLTree0.delete(3670);
      aVLTree0.delete(2144);
      assertEquals(0, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert((-1778));
      int int0 = 0;
      int int1 = (-1889);
      aVLTree0.insert((-1889));
      aVLTree0.delete(0);
      aVLTree0.insert(0);
      int int2 = (-2470);
      aVLTree0.delete((-2470));
      aVLTree0.delete((-2470));
      aVLTree0.delete((-1778));
      aVLTree0.insert(1979);
      // Undeclared exception!
      try { 
        aVLTree0.insert(1979);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("main.java.avl_java_travis.AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(1);
      aVLTree0.insert((-549));
      aVLTree0.delete((-227));
      aVLTree0.delete(4215);
      aVLTree0.insert((-1182));
      aVLTree0.delete(0);
      aVLTree0.delete((-549));
      aVLTree0.getRoot();
      aVLTree0.height();
      aVLTree0.delete(0);
      aVLTree0.height();
      aVLTree0.height();
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      int int0 = aVLTree0.getBalance(aVLTree_Node0);
      assertEquals(1, aVLTree0.height());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(2);
      AVLTree.Node aVLTree_Node0 = aVLTree0.find((-1));
      assertNull(aVLTree_Node0);
      
      aVLTree0.find(2);
      int int0 = aVLTree0.getBalance((AVLTree.Node) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert((-4));
      AVLTree.Node aVLTree_Node0 = aVLTree0.find((-4));
      assertNotNull(aVLTree_Node0);
      
      AVLTree.Node aVLTree_Node1 = aVLTree_Node0.right;
      int int0 = aVLTree0.getBalance((AVLTree.Node) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      AVLTree.Node aVLTree_Node0 = aVLTree0.find((-870));
      assertNull(aVLTree_Node0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete(1);
      aVLTree0.insert((-543));
      aVLTree0.delete((-543));
      aVLTree0.insert((-543));
      aVLTree0.delete(1);
      aVLTree0.delete(1651);
      aVLTree0.delete((-5018));
      aVLTree0.delete((-250));
      aVLTree0.insert(1);
      aVLTree0.delete(0);
      aVLTree0.getBalance((AVLTree.Node) null);
      aVLTree0.height();
      aVLTree0.insert((-301));
      aVLTree0.height();
      aVLTree0.getRoot();
      // Undeclared exception!
      try { 
        aVLTree0.insert(1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("main.java.avl_java_travis.AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert((-4016));
      aVLTree0.delete((-4016));
      int int0 = (-1);
      aVLTree0.delete((-1));
      int int1 = 0;
      aVLTree0.insert(0);
      int int2 = 1139;
      aVLTree0.insert(1139);
      aVLTree0.find(0);
      // Undeclared exception!
      try { 
        aVLTree0.insert(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("main.java.avl_java_travis.AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      int int0 = aVLTree0.height();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(2649);
      aVLTree0.delete((-535));
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      aVLTree0.delete((-3073));
      aVLTree0.insert((-3073));
      aVLTree0.height();
      AVLTree.Node aVLTree_Node1 = aVLTree_Node0.left;
      aVLTree_Node0.left = aVLTree_Node1;
      aVLTree0.insert(0);
      aVLTree0.find(0);
      aVLTree_Node0.left = aVLTree_Node1;
      aVLTree0.insert((-158));
      aVLTree0.insert(1);
      aVLTree0.height();
      aVLTree0.getBalance(aVLTree_Node0);
      aVLTree0.height();
      aVLTree0.find((-158));
      aVLTree0.find(1255);
      assertEquals(2, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(0);
      aVLTree0.delete((-1));
      aVLTree0.delete(0);
      aVLTree0.insert(0);
      aVLTree0.delete(1);
      aVLTree0.delete((-2442));
      aVLTree0.getRoot();
      aVLTree0.height();
      aVLTree0.delete(1476);
      aVLTree0.getRoot();
      aVLTree0.height();
      AVLTree.Node aVLTree_Node0 = aVLTree0.new Node(0);
      assertEquals(0, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(0);
      aVLTree0.delete(1231);
      aVLTree0.delete((-4186));
      aVLTree0.insert(1231);
      aVLTree0.height();
      aVLTree0.delete(1);
      aVLTree0.insert((-3900));
      aVLTree0.delete(1231);
      aVLTree0.insert(740);
      aVLTree0.height();
      aVLTree0.height();
      aVLTree0.delete(1);
      aVLTree0.insert((-1335));
      aVLTree0.delete(1);
      aVLTree0.getRoot();
      aVLTree0.delete(0);
      aVLTree0.find(0);
      aVLTree0.insert((-3785));
      aVLTree0.insert(1);
      aVLTree0.insert((-202));
      aVLTree0.delete(0);
      aVLTree0.getRoot();
      assertEquals(2, aVLTree0.height());
  }
}
